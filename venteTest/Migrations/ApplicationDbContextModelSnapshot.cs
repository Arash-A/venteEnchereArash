// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;
using venteTest.Data;
using venteTest.Models;

namespace venteTest.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("venteTest.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Adresse");

                    b.Property<string>("Civilite");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("DateInscription");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Langue");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nom");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Prenom");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("venteTest.Models.Categorie", b =>
                {
                    b.Property<int>("CategorieId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Nom");

                    b.HasKey("CategorieId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("venteTest.Models.ConfigurationAdmin", b =>
                {
                    b.Property<int>("ConfigurationAdminId")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("PasGlobalEnchere");

                    b.Property<decimal>("TauxGlobalComissionAuVendeur");

                    b.HasKey("ConfigurationAdminId");

                    b.ToTable("ConfigurationAdmins");
                });

            modelBuilder.Entity("venteTest.Models.Enchere", b =>
                {
                    b.Property<int>("EnchereId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("MiseurId");

                    b.Property<double>("Niveau");

                    b.Property<int>("ObjetId");

                    b.HasKey("EnchereId");

                    b.HasIndex("MiseurId");

                    b.HasIndex("ObjetId");

                    b.ToTable("Encheres");
                });

            modelBuilder.Entity("venteTest.Models.Evaluation", b =>
                {
                    b.Property<int>("EvaluationID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Commentaire")
                        .HasMaxLength(10000);

                    b.Property<int>("Cote");

                    b.Property<DateTime>("DateEvaluation");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Numero");

                    b.Property<int>("ObjetId");

                    b.HasKey("EvaluationID");

                    b.ToTable("Evaluations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Evaluation");
                });

            modelBuilder.Entity("venteTest.Models.Fichier", b =>
                {
                    b.Property<int>("FichierId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NomLocale");

                    b.Property<string>("NomOriginal")
                        .IsRequired();

                    b.Property<int>("ObjetId");

                    b.Property<string>("Remarques");

                    b.Property<DateTime>("verseLe");

                    b.HasKey("FichierId");

                    b.HasIndex("ObjetId");

                    b.ToTable("Fichiers");
                });

            modelBuilder.Entity("venteTest.Models.Objet", b =>
                {
                    b.Property<int>("ObjetID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AcheteurId");

                    b.Property<int>("CategorieID");

                    b.Property<int?>("ConfigurationAdminId");

                    b.Property<DateTime>("DateInscription");

                    b.Property<DateTime>("DateLimite");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400);

                    b.Property<string>("Nom")
                        .IsRequired();

                    b.Property<double>("PrixDepart");

                    b.Property<int>("Status");

                    b.Property<string>("VendeurId")
                        .IsRequired();

                    b.Property<string>("imageUrl")
                        .HasMaxLength(1024);

                    b.HasKey("ObjetID");

                    b.HasIndex("AcheteurId");

                    b.HasIndex("CategorieID");

                    b.HasIndex("ConfigurationAdminId");

                    b.HasIndex("VendeurId");

                    b.ToTable("Objets");
                });

            modelBuilder.Entity("venteTest.Models.Miseur", b =>
                {
                    b.HasBaseType("venteTest.Models.ApplicationUser");


                    b.ToTable("Miseur");

                    b.HasDiscriminator().HasValue("Miseur");
                });

            modelBuilder.Entity("venteTest.Models.AchatEvaluation", b =>
                {
                    b.HasBaseType("venteTest.Models.Evaluation");

                    b.Property<string>("VendeurId");

                    b.HasIndex("ObjetId")
                        .IsUnique();

                    b.HasIndex("VendeurId");

                    b.ToTable("AchatEvaluation");

                    b.HasDiscriminator().HasValue("AchatEvaluation");
                });

            modelBuilder.Entity("venteTest.Models.VenteEvaluation", b =>
                {
                    b.HasBaseType("venteTest.Models.Evaluation");

                    b.Property<string>("AcheteurId");

                    b.HasIndex("AcheteurId");

                    b.HasIndex("ObjetId")
                        .IsUnique();

                    b.ToTable("VenteEvaluation");

                    b.HasDiscriminator().HasValue("VenteEvaluation");
                });

            modelBuilder.Entity("venteTest.Models.Vendeur", b =>
                {
                    b.HasBaseType("venteTest.Models.Miseur");


                    b.ToTable("Vendeur");

                    b.HasDiscriminator().HasValue("Vendeur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("venteTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("venteTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("venteTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("venteTest.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("venteTest.Models.Enchere", b =>
                {
                    b.HasOne("venteTest.Models.Miseur", "Miseur")
                        .WithMany("Encheres")
                        .HasForeignKey("MiseurId");

                    b.HasOne("venteTest.Models.Objet", "Objet")
                        .WithMany("Encheres")
                        .HasForeignKey("ObjetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("venteTest.Models.Fichier", b =>
                {
                    b.HasOne("venteTest.Models.Objet", "Objet")
                        .WithMany("Fichiers")
                        .HasForeignKey("ObjetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("venteTest.Models.Objet", b =>
                {
                    b.HasOne("venteTest.Models.Miseur", "Acheteur")
                        .WithMany("Objets")
                        .HasForeignKey("AcheteurId");

                    b.HasOne("venteTest.Models.Categorie", "Categorie")
                        .WithMany("Objets")
                        .HasForeignKey("CategorieID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("venteTest.Models.ConfigurationAdmin", "ConfigurationAdmin")
                        .WithMany()
                        .HasForeignKey("ConfigurationAdminId");

                    b.HasOne("venteTest.Models.Vendeur", "Vendeur")
                        .WithMany()
                        .HasForeignKey("VendeurId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("venteTest.Models.AchatEvaluation", b =>
                {
                    b.HasOne("venteTest.Models.Objet", "Objet")
                        .WithOne("AchatEvaluation")
                        .HasForeignKey("venteTest.Models.AchatEvaluation", "ObjetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("venteTest.Models.Vendeur", "Vendeur")
                        .WithMany()
                        .HasForeignKey("VendeurId");
                });

            modelBuilder.Entity("venteTest.Models.VenteEvaluation", b =>
                {
                    b.HasOne("venteTest.Models.Miseur", "Acheteur")
                        .WithMany()
                        .HasForeignKey("AcheteurId");

                    b.HasOne("venteTest.Models.Objet", "Objet")
                        .WithOne("VenteEvaluation")
                        .HasForeignKey("venteTest.Models.VenteEvaluation", "ObjetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
